# -*- coding: utf-8 -*-
"""pokemon

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AzqD6F-BCr3a7UZeJm3E7a2yagNfCUS0
"""

import csv
from collections import Counter

#defined method to help in finding NaNs for numbers in atk, def, hp
def isNaN(num):
    return num!= num

#1.1----------------------------------------------------------------
#read the pokemonTrain csv file 
with open('pokemonTrain.csv','r') as csv_file:
    csv_reader = csv.DictReader(csv_file)

    pokemonDict=[{}] #dictionary
    pokemonDict.remove({})
    total_fire_pokemon=0
    above_level=0

    #defining variables to find average attack, defence and hp values of pokemons above level 40 and below level 40 
    atk_abv_40=0
    def_abv_40=0
    hp_abv_40=0
    avg_atk_below_40=0 
    avg_defence_below_40=0 
    avg_hp_below_40=0
    atk_abv_40_tot=0
    def_abv_40_tot=0
    hp_abv_40_tot=0
    atk_below_tot=0
    def_below_tot=0
    hp_below_tot=0


#1.1----------------------------------------------
    for line in csv_reader:
        if line.get("type")=="fire": 
            if float(line.get('level'))>=40:
                above_level+=1       
            total_fire_pokemon=total_fire_pokemon+1
        pokemonDict.append(line)

        #getting values of atk and def for assignment 1.2
        #this filters info for pokemon of level > 40
        temp_atk= float(line.get("atk")) 
        if not isNaN(temp_atk) and float(line.get("level"))>40:  #if the value is not NaN, we will proceed with adding it to previous variables to calculate average
            atk_abv_40 = temp_atk+atk_abv_40
            atk_abv_40_tot += 1
        temp_def= float(line.get("def"))
        if not isNaN(temp_def) and float(line.get("level"))>40:
            def_abv_40 = temp_def + def_abv_40
            def_abv_40_tot+=1
        temp_hp= float(line.get("hp"))
        if not isNaN(temp_hp) and float(line.get("level"))>40:
            hp_abv_40 = temp_hp+hp_abv_40
            hp_abv_40_tot+=1
        
        #this filters out info needed for pokemon of levels <=40
        #it takes the current value of the atk, hp, def, and it adds it onto the previous value at each iteration. 
        temp_atk= float(line.get("atk"))
        if not isNaN(temp_atk) and float(line.get("level"))<=40:
            avg_atk_below_40 = temp_atk + avg_atk_below_40
            atk_below_tot+=1
        temp_def= float(line.get("def"))
        if not isNaN(temp_def) and float(line.get("level"))<=40:
            avg_defence_below_40 = temp_def + avg_defence_below_40
            def_below_tot+=1
        temp_hp= float(line.get("hp"))
        if not isNaN(temp_hp) and float(line.get("level"))<=40:
            avg_hp_below_40 = temp_hp + avg_hp_below_40
            hp_below_tot+=1

fire_above_40 = round((above_level/total_fire_pokemon)*100)

#write to another file 
f = open("pokemon1.txt", "w")
f.write( 'Percentage of fire type Pokemons at or above level 40 = '+ str(fire_above_40))
f.close()

#1.2------------------------------------
#print(pokemonDict)
common_type=[] #looking for most common weakness in this assignment part

for pokemon in pokemonDict:
   # print(pokemon)
    if pokemon['type']=="NaN":                                  #this will check if the type is of NaN type
        weakness = pokemon.get('weakness')                      #if yes, then get the weakness of that pokemon
        for a in pokemonDict:                          #Go through weakness of all pokemon
            if a['weakness']== weakness :                       #if weakness of a pokemon matches the weakness of the NaN pokemon
                common_type.append(a['type'])
        result = Counter(common_type).most_common(1)[0][0]
        pokemon['type']=result
        common_type.clear()

    """#method to calculate the most frequent weakness for each type
def most_freq(weakness_list):

  my_temp = defaultdict(int)

  #sort before figuring out max so it will pick first word in alphabet in case of tie
  weakness_list.sort()

  #test print of sorted list
  #print(weakness_list) 

  #if there were no instances of the type, there would be an empty list of weaknesses 
  #- the code below handles the code from breaking in the above case
  if(len(weakness_list) == 0):
    return None

  for sub in weakness_list:
    for word in sub.split():
      my_temp[word] += 1
  
  mfreq_weakness = max(my_temp, key=my_temp.get)
  return mfreq_weakness

#store the most frequent weaknesses into a variable for each type in csv file
mfw_norm = most_freq(norm_weakness)
mfw_fight = most_freq(fight_weakness)
mfw_water = most_freq(water_weakness)
mfw_flying = most_freq(fly_weakness)
mfw_fire = most_freq(fire_weakness)
mfw_poison = most_freq(poison_weakness)
mfw_rock = most_freq(rock_weakness)
mfw_ground = most_freq(ground_weakness)"""

    #1.3 cont logic replacing values and calculating average -------------------
    if isNaN(float(pokemon.get("atk"))) and float(pokemon['level'])>40:
        pokemon['atk']=round(atk_abv_40/atk_abv_40_tot,1)
    elif isNaN(float(pokemon.get("atk"))) and float(pokemon['level'])<=40:
        pokemon['atk']=round(avg_atk_below_40/atk_below_tot,1)
    
    if isNaN(float(pokemon.get("def"))) and float(pokemon['level'])>40:
        pokemon['def']=round(def_abv_40/def_abv_40_tot,1)
    elif isNaN(float(pokemon.get("def"))) and float(pokemon['level'])<=40:
        pokemon['def']=round(avg_defence_below_40/def_below_tot,1)
    
    if isNaN(float(pokemon.get("hp"))) and float(pokemon['level'])>40:
        pokemon['hp']=round(hp_abv_40/hp_abv_40_tot,1)
    elif isNaN(float(pokemon.get("hp"))) and float(pokemon['level'])<=40:
        pokemon['hp']=round(avg_hp_below_40/hp_below_tot,1)

"""#calculate avg of pokemon above lvl40 atk, def, and hp
avg_atk_40 = round(sum(atk_list_40)/len(atk_list_40),1)
avg_def_40 = round(sum(def_list_40)/len(def_list_40),1)
avg_hp_40 = round(sum(hp_list_40)/len(hp_list_40),1)

#print avgs for testing above lvl 40
print(avg_atk_40)
print(avg_def_40)
print(avg_hp_40)

#testing lists for <= 40 
print()
print("<= 40")
print(atk_list_low)
print(def_list_low)
print(hp_list_low)

#calculate avg of pokemon <= lvl40 atk, def, and hp
avg_atk_low = round(sum(atk_list_low)/len(atk_list_low),1)
avg_def_low = round(sum(def_list_low)/len(def_list_low),1)
avg_hp_low = round(sum(hp_list_low)/len(hp_list_low),1)

#print avgs for testing <= 40
print(avg_atk_low)
print(avg_def_low)
print(avg_hp_low)"""

#writing to CSV file
keys = pokemonDict[0].keys()
with open("pokemonResult.csv",'w',newline='') as outputfile:
    dict_writer = csv.DictWriter(outputfile, keys)
    dict_writer.writeheader()
    dict_writer.writerows(pokemonDict)

#1.4---------------------------------------
result_personality=[]

#creating defined method to add list of personalities for a certain type, given the type and list 
def add_personalities(pokemon_type,list_of_personalities):
    #iterating through the list of personalities and then seeing what has been included yet
        for Item in list_of_personalities:
          if Item not in result_personality: #if its not already in the list, add it in
            result_personality.append(Item)
          
pokemon_personalities={}
for line in pokemonDict:
    pokemon_type=line.get('type')
    if not (pokemon_personalities.get((pokemon_type))): #if not already in the pokemon_personalities, add it in
        pokemon_personalities[pokemon_type]=[]

for pokemon_type in pokemon_personalities:
    personalities_list=[]
    for dictionary in pokemonDict:
        if(pokemon_type==dictionary['type']):
                pokemon_personality=dictionary.get('personality')
                if (pokemon_personality not in personalities_list):
                    personalities_list.append(pokemon_personality)
    sorted_list= sorted(personalities_list) #sort the list of personalities alphabetically 
    pokemon_personalities[pokemon_type]=sorted_list   

sorted_pok_dict = dict(sorted(pokemon_personalities.items(),key=lambda x:x[0].lower()))

formatted_dict = str(sorted_pok_dict).replace("{", "").replace("}", "").replace("[","").replace("],","\n \t").replace("'", "").replace("]","")

#write to another file 
f = open("pokemon4.txt", "w")
f.write('Pokemon type to personality mapping:'+ "\n" + "\t" + formatted_dict)
        #'\n'.join("{}: {}".format(k, v) for k, v in sorted_dict.items()))
f.close()

#1.5----------------------------------------------------------
avg_hp=0
count=0

#iterating through the pokemon in the pokemonDictionary 
for pokemon in pokemonDict:
    hp_lvl=pokemon.get('stage')
    if hp_lvl == "3.0": #if the level is 3.0 - iterate counter
        count+=1
        avg_hp=avg_hp+float(pokemon['hp'])
  
f = open('pokemon5.txt','w')
f.write( 'Average hit point for Pokemons of stage 3.0 = '+ str(round((avg_hp/count))))
f.close()

csv_file.close()
outputfile.close()

